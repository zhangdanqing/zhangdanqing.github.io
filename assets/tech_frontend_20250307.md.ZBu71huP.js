import{_ as i,a,b as t,c as n,d as h,e as l,f as e,g as p,h as k,i as r,j as E,k as g,l as d,m as o,n as c,o as y,p as u,q as F,r as C,s as m,t as _,u as A,v as x,w as b}from"./chunks/google-login.BVj5-DkY.js";import{_ as B,c as D,o as v,ae as f}from"./chunks/framework.BjlC_BXf.js";const L=JSON.parse('{"title":"Next.js全栈实战：手把手集成NextAuth实现Google/GitHub一键登录","description":"","frontmatter":{},"headers":[],"relativePath":"tech/frontend/20250307.md","filePath":"tech/frontend/20250307.md"}'),q={name:"tech/frontend/20250307.md"};function T(I,s,G,N,O,w){return v(),D("div",null,s[0]||(s[0]=[f('<h1 id="next-js全栈实战-手把手集成nextauth实现google-github一键登录" tabindex="-1">Next.js全栈实战：手把手集成NextAuth实现Google/GitHub一键登录 <a class="header-anchor" href="#next-js全栈实战-手把手集成nextauth实现google-github一键登录" aria-label="Permalink to &quot;Next.js全栈实战：手把手集成NextAuth实现Google/GitHub一键登录&quot;">​</a></h1><img src="'+i+`" alt="alt text" style="width:100%;height:auto;"><h2 id="🔥-前言" tabindex="-1">🔥 前言 <a class="header-anchor" href="#🔥-前言" aria-label="Permalink to &quot;🔥 前言&quot;">​</a></h2><p>最近想搭建一个全栈应用，登录这部分功能希望是通过Google授权登录。我发现Next比较适合，集成了NextAuth，可以轻松实现各种身份验证和授权功能，无需手动处理令牌和会话，集成谷歌、github等常用平台登录，尝试搭建了下，简单跟大家分享下搭建过程和遇到的坑。</p><h2 id="🛠️-环境准备" tabindex="-1">🛠️ 环境准备 <a class="header-anchor" href="#🛠️-环境准备" aria-label="Permalink to &quot;🛠️ 环境准备&quot;">​</a></h2><p>确保项目已初始化Next.js并安装依赖：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create-next-app@latest</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># or</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> next-app</span></span></code></pre></div><p>如果你希望使用 TypeScript 开发项目，可以通过 --typescript 参数创建 TypeScript 项目：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create-next-app@latest</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --typescript</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># or</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> next-app</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --typescript</span></span></code></pre></div><p>创建成功后，运行 pnpm run dev 或 yarn dev 来启动开发服务器，访问地址为 <a href="http://localhost:3000" target="_blank" rel="noreferrer">http://localhost:3000</a>,可以看到项目已经启动成功，根据需求自行开发项目内容。</p><h2 id="🌐-配置nextauth核心文件" tabindex="-1">🌐 配置NextAuth核心文件 <a class="header-anchor" href="#🌐-配置nextauth核心文件" aria-label="Permalink to &quot;🌐 配置NextAuth核心文件&quot;">​</a></h2><p><em>1. 创建API路由</em></p><p>在src/app目录下创建api/auth/[...nextauth]/route.ts文件</p><img src="`+a+'" alt="alt text" style="width:100%;height:auto;"><p><em>2. 安装依赖</em></p><p>在项目根目录下运行以下命令来安装所需的依赖：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> next-auth</span></span></code></pre></div><p><em>3. 完善项目内容和Sign In按钮</em></p><p>自行在项目中开发具体的内容和搭建页面，下面是我的项目，已经实现了UI部分的功能。我需要在Sign In按钮上添加一个点击事件，当用户点击按钮时，跳转到第三方Google/GitHub授权登录</p><img src="'+t+`" alt="alt text" style="width:100%;height:auto;text-align:center;"><p><em>4. Sign In 按钮跳转到第三方</em> 点击Sign In按钮，执行handleGoogleLogin,跳转google还是github</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> signIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;google&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  callbackUrl: callbackUrl,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><img src="`+n+'" alt="alt text" style="width:100%;height:auto;text-align:center;"><p><em>5. 实现认证代码</em></p><p>在api/auth/[...nextauth]/route.ts文件中，实现认证逻辑。 <img src="'+h+'" alt="alt text" style="width:100%;height:auto;text-align:center;"></p><h2 id="🔑-申请google-oauth权限" tabindex="-1">🔑 申请google OAuth权限 <a class="header-anchor" href="#🔑-申请google-oauth权限" aria-label="Permalink to &quot;🔑 申请google OAuth权限&quot;">​</a></h2><ul><li>第一步. 谷歌云控制台 进入<a href="https://console.cloud.google.com/" target="_blank" rel="noreferrer">Google Cloud</a></li></ul><p>看到当前的项目，我用红框圈起来的名字，点击可以创建项目，选择无组织</p><img src="'+l+'" alt="alt text" style="width:100%;height:auto;text-align:center;"><img src="'+e+'" alt="alt text" style="width:100%;height:auto;text-align:center;"><ul><li>第二步. 配置</li></ul><p>点击左侧菜单栏的“API 和服务”，然后点击“OAuth权限请求页面” <img src="'+p+'" alt="alt text" style="width:100%;height:auto;text-align:center;"></p><p>根据提示按步骤填写，受众群体选择外部 <img src="'+k+'" alt="alt text" style="width:100%;height:auto;text-align:center;"></p><img src="'+r+'" alt="alt text" style="width:100%;height:auto;text-align:center;"><ul><li>第三步. 客户端配置</li></ul><img src="'+E+'" alt="alt text" style="width:100%;height:auto;text-align:center;"><img src="'+g+'" alt="alt text" style="width:100%;height:auto;text-align:center;"><p>已获授权的 JavaScript 来源写</p><p><a href="http://localhost:3000" target="_blank" rel="noreferrer">http://localhost:3000</a></p><p>已获授权的重定向 URI写</p><p><a href="http://localhost:3000/api/auth/callback/google" target="_blank" rel="noreferrer">http://localhost:3000/api/auth/callback/google</a></p><p><a href="https://xn--fhq75av6hca000c3y9clbm.com/api/auth/callback/google" target="_blank" rel="noreferrer">https://上线后你的域名.com/api/auth/callback/google</a></p><img src="'+d+'" alt="alt text" style="width:100%;height:auto;text-align:center;"><ul><li>第四步.</li></ul><p>创建成功后会生成客户端ID和客户端密钥，保存好，后面会放到环境变量中，授权的时候会调用</p><img src="'+o+'" alt="alt text" style="width:100%;height:auto;text-align:center;"><img src="'+c+'" alt="alt text" style="width:100%;height:auto;text-align:center;"><ul><li>第五步.</li></ul><p>添加测试用户，把自己的google账户添加为测试用户</p><img src="'+y+'" alt="alt text" style="width:100%;height:auto;text-align:center;"><h2 id="🔑-申请github-oauth权限" tabindex="-1">🔑 申请github OAuth权限 <a class="header-anchor" href="#🔑-申请github-oauth权限" aria-label="Permalink to &quot;🔑 申请github OAuth权限&quot;">​</a></h2><ul><li>第一步. 进入github 点击自己的头像，选择setting</li></ul><img src="'+u+'" alt="alt text" style="width:100%;height:auto;text-align:center;"><ul><li>第二步.选择左侧底部的 Developer settings</li></ul><img src="'+F+'" alt="alt text" style="width:100%;height:auto;text-align:center;"><ul><li>第二步.选择OAuth apps</li></ul><img src="'+C+'" alt="alt text" style="width:100%;height:auto;text-align:center;"><ul><li>第三步. 按步骤填写</li></ul><img src="'+m+'" alt="alt text" style="width:100%;height:auto;text-align:center;"><p>Homepage URL 写</p><p><a href="http://localhost:3000" target="_blank" rel="noreferrer">http://localhost:3000</a></p><p>Authorization callback URL写</p><p><a href="http://localhost:3000/api/auth/callback/github" target="_blank" rel="noreferrer">http://localhost:3000/api/auth/callback/github</a></p><img src="'+_+'" alt="alt text" style="width:100%;height:auto;text-align:center;"><p>点击Generate a new client secret生成秘钥，Client ID是你应用的ID,把id和秘钥也保存，后续配置到环境变量使用</p><img src="'+A+`" alt="alt text" style="width:100%;height:auto;text-align:center;"><h2 id="📝-配置环境变量" tabindex="-1">📝 配置环境变量 <a class="header-anchor" href="#📝-配置环境变量" aria-label="Permalink to &quot;📝 配置环境变量&quot;">​</a></h2><p>在根目录创建.env环境变量文件，填写刚才拿到的google的id和秘钥以及github的id和秘钥</p><p>#NextAuth 核心配置 NEXTAUTH_URL=<a href="http://localhost:3000" target="_blank" rel="noreferrer">http://localhost:3000</a> //用的基础URL（用于OAuth回调） NEXTAUTH_SECRET=your_secure_secret_here //这个是随机生成的，用于加密会话令牌和CSRF令牌的密钥</p><p>#Google OAuth GOOGLE_CLIENT_ID=your_google_client_id GOOGLE_CLIENT_SECRET=your_google_secret</p><p>#GitHub OAuth GITHUB_CLIENT_ID=your_github_client_id GITHUB_CLIENT_SECRET=your_github_secret</p><h2 id="💻-前端集成" tabindex="-1">💻 前端集成 <a class="header-anchor" href="#💻-前端集成" aria-label="Permalink to &quot;💻 前端集成&quot;">​</a></h2><p>之前的在api/auth/[...nextauth]/route.ts文件中，实现认证的逻辑就会用到id和秘钥</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NextAuth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;next-auth&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GoogleProvider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;next-auth/providers/google&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GithubProvider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;next-auth/providers/github&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> handler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NextAuth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  providers: [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    GithubProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      clientId: process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GITHUB_CLIENT_ID</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      clientSecret: process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GITHUB_CLIENT_SECRET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    GoogleProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      clientId: process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GOOGLE_CLIENT_ID</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      clientSecret: process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GOOGLE_CLIENT_SECRET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  secret: process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NEXTAUTH_SECRET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  debug: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 启用调试模式，以便查看详细的错误信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  pages: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    signIn: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/auth/signin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    error: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/auth/error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  callbacks: {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">token</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (token </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> session.user) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 扩展 session.user 类型以包含 id 属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        (session.user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">session.user,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          id: token.sub</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> session;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> jwt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">token</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">account</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (account </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;OAuth账户信息:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          provider: account.provider,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          type: account.type,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          access_token: account.access_token?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          id: user.id</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        token.accessToken </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> account.access_token;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        token.id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user.id;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> token;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> redirect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">baseUrl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 默认行为：允许 NextAuth 处理 OAuth 重定向</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (url.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">baseUrl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">url</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url).origin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baseUrl) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baseUrl;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> signIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">account</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;OAuth请求目标URL:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, account?.authorization_url);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { handler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GET, handler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> POST };</span></span></code></pre></div><h2 id="🚀-效果演示" tabindex="-1">🚀 效果演示 <a class="header-anchor" href="#🚀-效果演示" aria-label="Permalink to &quot;🚀 效果演示&quot;">​</a></h2><p>github授权登录</p><img src="`+x+'" alt="alt text" style="width:100%;height:auto;text-align:center;"><p>google授权登录</p><img src="'+b+`" alt="alt text" style="width:100%;height:auto;text-align:center;"><h2 id="⚠️-常见问题" tabindex="-1">⚠️ 常见问题 <a class="header-anchor" href="#⚠️-常见问题" aria-label="Permalink to &quot;⚠️ 常见问题&quot;">​</a></h2><h3 id="_1-google-链接chrome报错-etimedout-93-46-8-90-443或者timeout-等问题" tabindex="-1">1.google 链接chrome报错，ETIMEDOUT 93.46.8.90:443或者timeout 等问题 <a class="header-anchor" href="#_1-google-链接chrome报错-etimedout-93-46-8-90-443或者timeout-等问题" aria-label="Permalink to &quot;1.google 链接chrome报错，ETIMEDOUT 93.46.8.90:443或者timeout 等问题&quot;">​</a></h3><p>我尝试使用代理写到api/auth/[...nextauth]/route.ts中，如下操作，并没有起到作用</p><div class="language-typeScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typeScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { HttpsProxyAgent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;https-proxy-agent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { HttpProxyAgent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;http-proxy-agent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> proxyUrl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HTTPS_PROXY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;http://127.0.0.1:7890&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 替换为你的代理地址</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> httpAgent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpProxyAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(proxyUrl);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> httpsAgent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpsProxyAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(proxyUrl);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GoogleProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  clientId: process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GOOGLE_CLIENT_ID</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  clientSecret: process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GOOGLE_CLIENT_SECRET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  authorization: { params: { access_type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;offline&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  httpOptions: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    proxy: httpsAgent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>还尝试使用fetch，某些代理环境对 node-fetch 更友好。尝试强制 NextAuth 使用 fetch，依然不起作用。</p><p>最后找出问题所在，使用代理的时候，要开全局，尤其是要强制开启TUN模式，应该大部分连不上还是代理这的问题</p><h3 id="_2-google超时问题可以把时间调大一点-时间太短容易超时" tabindex="-1">2.google超时问题可以把时间调大一点，时间太短容易超时 <a class="header-anchor" href="#_2-google超时问题可以把时间调大一点-时间太短容易超时" aria-label="Permalink to &quot;2.google超时问题可以把时间调大一点，时间太短容易超时&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GoogleProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  clientId: process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GOOGLE_CLIENT_ID</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  clientSecret: process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GOOGLE_CLIENT_SECRET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  httpOptions: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    timeout: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50000</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 将超时时间增加到 10 秒</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div>`,87)]))}const U=B(q,[["render",T]]);export{L as __pageData,U as default};
